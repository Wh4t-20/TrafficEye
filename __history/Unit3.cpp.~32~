//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop
#include "Unit1.h"
#include "Unit3.h"
#include <RegularExpressions.hpp>

//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm3 *Form3;

// Global flag to track if the user is editing
bool isEditing = false;

//---------------------------------------------------------------------------
__fastcall TForm3::TForm3(TComponent* Owner)
    : TForm(Owner)
{
    verifyLabel->Hide();
    editButton->Hide();
    saveButton->Hide();
}

//---------------------------------------------------------------------------
void __fastcall TForm3::Button1Click(TObject *Sender)
{
    this->Hide();
    mainMenu->Show();
}

//---------------------------------------------------------------------------

// Function to validate plate number format (LLL-DDDD)
bool ValidatePlateNumber(const String &plateNumber)
{
    if (plateNumber.Length() != 8) return false;

    // Check format: LLL-DDDD
    for (int i = 1; i <= 3; i++) {
        if (!IsCharAlpha(plateNumber[i])) return false;
    }

    if (plateNumber[4] != '-') return false;

    for (int i = 5; i <= 8; i++) {
        if (!IsCharNumeric(plateNumber[i])) return false;
    }

    return true;
}

// Function to validate date format (MM/DD/YYYY)
bool ValidateDate(const String &date)
{
    if (date.Length() != 10) return false;

    // Check format: MM/DD/YYYY
    if (!IsCharNumeric(date[1]) || !IsCharNumeric(date[2])) return false;
    if (date[3] != '/') return false;
    if (!IsCharNumeric(date[4]) || !IsCharNumeric(date[5])) return false;
    if (date[6] != '/') return false;
    for (int i = 7; i <= 10; i++) {
        if (!IsCharNumeric(date[i])) return false;
    }

    // Validate ranges
    int month = StrToIntDef(date.SubString(1, 2), 0);
    int day = StrToIntDef(date.SubString(4, 2), 0);
    int year = StrToIntDef(date.SubString(7, 4), 0);

    if (month < 1 || month > 12) return false;
    if (day < 1 || day > 31) return false;
    if (year < 1900 || year > 2100) return false;

    // Simple day validation (doesn't account for leap years or month-specific days)
    if (month == 2 && day > 29) return false;
    if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30) return false;

    return true;
}

// Function to validate time format (HH:MM in 24-hour format)
bool ValidateTime(const String &time)
{
    if (time.Length() != 5) return false;

    // Check format: HH:MM
    if (!IsCharNumeric(time[1]) || !IsCharNumeric(time[2])) return false;
    if (time[3] != ':') return false;
    if (!IsCharNumeric(time[4]) || !IsCharNumeric(time[5])) return false;

    // Validate ranges
    int hour = StrToIntDef(time.SubString(1, 2), -1);
    int minute = StrToIntDef(time.SubString(4, 2), -1);

    if (hour < 0 || hour > 23) return false;
    if (minute < 0 || minute > 59) return false;

    return true;
}

void __fastcall TForm3::addButtonClick(TObject *Sender)
{
    static int clickCount = 0;

    // Validate input before adding
    String inputText = inputBox->Text.Trim();
    if (inputText.IsEmpty()) {
        ShowMessage("Input cannot be empty.");
        return;
    }

    // Validation based on current step
    bool isValid = true;
    String errorMessage = "";

    switch (clickCount) {
        case 0: // Plate Number
            if (!ValidatePlateNumber(inputText)) {
                isValid = false;
                errorMessage = "Invalid plate number format. Please use LLL-DDDD format (e.g., ABC-1234).";
            }
            break;
        case 1: // Date
            if (!ValidateDate(inputText)) {
                isValid = false;
                errorMessage = "Invalid date format. Please use MM/DD/YYYY format (e.g., 12/25/2024).";
            }
            break;
        case 2: // Time
            if (!ValidateTime(inputText)) {
                isValid = false;
                errorMessage = "Invalid time format. Please use HH:MM in 24-hour format (e.g., 14:30).";
            }
            break;
        case 3: // Location - any string is valid
        case 4: // Violation Type - any string is valid
            // No special validation needed for these fields
            break;
    }

    if (!isValid) {
        ShowMessage(errorMessage);
        return; // Don't proceed if validation fails
    }

    // Add valid input to list
    listBox->Items->Add(inputText);
    inputBox->Text = ""; // Clear input box

    // Hide buttons initially
    verifyLabel->Hide();
    editButton->Hide();
    saveButton->Hide();

    clickCount++;
    switch (clickCount) {
        case 1:
            promptLabel->Caption = "Enter Date:";
            formatLabel->Caption = "MM/DD/YYYY";
            break;
        case 2:
            promptLabel->Caption = "Enter Time:";
            formatLabel->Caption = "HH:MM (24 Hour Format)";
            break;
        case 3:
            promptLabel->Caption = "Enter Location:";
            formatLabel->Caption = "";
            break;
        case 4:
            promptLabel->Caption = "Enter Violation Type:";
            formatLabel->Caption = "";
            break;
        default:
            promptLabel->Caption = "All done!";
            verifyLabel->Show();
            editButton->Show();
            saveButton->Show();
            clickCount = 0;
            break;
    }

    // **Only ask to save if the user was editing**
    if (isEditing) {
        if (MessageDlg("You've finished editing. Do you want to save the changes?", mtConfirmation, TMsgDlgButtons() << mbYes << mbNo, 0) == mrYes) {
            saveButtonClick(Sender); // Calls save function
        }
        isEditing = false; // Reset editing mode
    }
}

//---------------------------------------------------------------------------

void __fastcall TForm3::saveButtonClick(TObject *Sender)
{
    // Ask user for filename before saving
    String userFilename;
    if (!InputQuery("Save File", "Enter filename (without extension):", userFilename) || userFilename.Trim().IsEmpty()) {
        ShowMessage("Filename cannot be empty.");
        return;
    }

    // Create SaveDialog for file selection
    TSaveDialog *saveDialog = new TSaveDialog(this);
    saveDialog->Filter = "CSV files (*.csv)|*.csv|All files (*.*)|*.*";
    saveDialog->DefaultExt = "csv";
    saveDialog->FileName = userFilename + ".csv";

    if (saveDialog->Execute()) {
        try {
            TStringList *csvContent = new TStringList();
            String currentRecord = "";
            int fieldCount = 0;

            // Process listBox items (group of 4)
            for (int i = 0; i < listBox->Items->Count; i++) {
                String item = listBox->Items->Strings[i];

                if (fieldCount > 0) {
                    currentRecord += ",";
                }

                if (item.Pos(",") > 0) {
                    currentRecord += "\"" + item + "\"";  // Handle commas in data
                } else {
                    currentRecord += item;
                }

                fieldCount++;

                if (fieldCount == 4) {
                    csvContent->Add(currentRecord);
                    currentRecord = "";
                    fieldCount = 0;
                }
            }

            if (fieldCount > 0) {
                csvContent->Add(currentRecord);
            }

            csvContent->SaveToFile(saveDialog->FileName);
            ShowMessage("Data saved successfully to " + saveDialog->FileName);

			delete csvContent;

			this->Hide();
			mainMenu->Show();

        } catch (Exception &e) {
            ShowMessage("Error saving file: " + e.Message);
        }
    }

    delete saveDialog;
}

//---------------------------------------------------------------------------

void __fastcall TForm3::editButtonClick(TObject *Sender)
{
    if (listBox->ItemIndex >= 0) {
        // Enable editing mode
        isEditing = true;

        // Get selected item and put it back in the input box for editing
        inputBox->Text = listBox->Items->Strings[listBox->ItemIndex];

        // Remove the selected item from the list
        listBox->Items->Delete(listBox->ItemIndex);

        // Reset the form to show the appropriate prompt for the selected field
        // This assumes the items are in order: plate, date, time, location, violation
        int itemPosition = listBox->ItemIndex % 5; // Assuming 5 fields per record
        switch (itemPosition) {
            case 0:
                promptLabel->Caption = "Enter Plate Number:";
                formatLabel->Caption = "LLL-DDDD";
                break;
            case 1:
                promptLabel->Caption = "Enter Date:";
                formatLabel->Caption = "MM/DD/YYYY";
                break;
            case 2:
                promptLabel->Caption = "Enter Time:";
                formatLabel->Caption = "HH:MM (24 Hour Format)";
                break;
            case 3:
                promptLabel->Caption = "Enter Location:";
                formatLabel->Caption = "";
                break;
            case 4:
                promptLabel->Caption = "Enter Violation Type:";
                formatLabel->Caption = "";
                break;
        }
    } else {
        ShowMessage("Please select an item to edit.");
    }
}

//---------------------------------------------------------------------------

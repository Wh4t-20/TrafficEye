//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop
#include "Unit1.h"
#include "Unit3.h"

//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm3 *Form3;

// Global flag to track if the user is editing
bool isEditing = false;

//---------------------------------------------------------------------------
__fastcall TForm3::TForm3(TComponent* Owner)
    : TForm(Owner)
{
    verifyLabel->Hide();
    editButton->Hide();
    saveButton->Hide();
}

//---------------------------------------------------------------------------
void __fastcall TForm3::Button1Click(TObject *Sender)
{
    this->Hide();
    mainMenu->Show();
}

//---------------------------------------------------------------------------

void __fastcall TForm3::addButtonClick(TObject *Sender)
{
    static int clickCount = 0;

    // Ensure input box has text before adding
    if (!inputBox->Text.Trim().IsEmpty()) {
        listBox->Items->Add(inputBox->Text);
        inputBox->Text = ""; // Clear input box
    }

    // Hide buttons initially
    verifyLabel->Hide();
    editButton->Hide();
    saveButton->Hide();

    clickCount++;
    switch (clickCount) {
        case 1:
            promptLabel->Caption = "Enter Date:";
            formatLabel->Caption = "MM/DD/YYYY";
            break;
        case 2:
            promptLabel->Caption = "Enter Time:";
            formatLabel->Caption = "HH:MM (24 Hour Format)";
            break;
        case 3:
            promptLabel->Caption = "Enter Location:";
            formatLabel->Caption = "";
            break;
        case 4:
            promptLabel->Caption = "Enter Violation Type:";
            formatLabel->Caption = "";
            break;
        default:
            promptLabel->Caption = "All done!";
            verifyLabel->Show();
            editButton->Show();
            saveButton->Show();
            clickCount = 0;
            break;
    }

    // **Only ask to save if the user was editing**
    if (isEditing) {
        if (MessageDlg("You've finished editing. Do you want to save the changes?", mtConfirmation, TMsgDlgButtons() << mbYes << mbNo, 0) == mrYes) {
            saveButtonClick(Sender); // Calls save function
        }
        isEditing = false; // Reset editing mode
    }
}

//---------------------------------------------------------------------------

void __fastcall TForm3::saveButtonClick(TObject *Sender)
{
    // Ask user for filename before saving
    String userFilename;
    if (!InputQuery("Save File", "Enter filename (without extension):", userFilename) || userFilename.Trim().IsEmpty()) {
        ShowMessage("Filename cannot be empty.");
        return;
    }

    // Create SaveDialog for file selection
    TSaveDialog *saveDialog = new TSaveDialog(this);
    saveDialog->Filter = "CSV files (*.csv)|*.csv|All files (*.*)|*.*";
    saveDialog->DefaultExt = "csv";
    saveDialog->FileName = userFilename + ".csv";

    if (saveDialog->Execute()) {
        try {
            TStringList *csvContent = new TStringList();
            String currentRecord = "";
            int fieldCount = 0;

            // Process listBox items (group of 4)
            for (int i = 0; i < listBox->Items->Count; i++) {
                String item = listBox->Items->Strings[i];

                if (fieldCount > 0) {
                    currentRecord += ",";
                }

                if (item.Pos(",") > 0) {
                    currentRecord += "\"" + item + "\"";  // Handle commas in data
                } else {
                    currentRecord += item;
                }

                fieldCount++;

                if (fieldCount == 4) {
                    csvContent->Add(currentRecord);
                    currentRecord = "";
                    fieldCount = 0;
                }
            }

            if (fieldCount > 0) {
                csvContent->Add(currentRecord);
            }

            csvContent->SaveToFile(saveDialog->FileName);
            ShowMessage("Data saved successfully to " + saveDialog->FileName);

            delete csvContent;
        } catch (Exception &e) {
            ShowMessage("Error saving file: " + e.Message);
        }
    }

    delete saveDialog;
}

//---------------------------------------------------------------------------

void __fastcall TForm3::editButtonClick(TObject *Sender)
{
    if (listBox->ItemIndex >= 0) {
        // Enable editing mode
        isEditing = true;

        // Get selected item and put it back in the input box for editing
        inputBox->Text = listBox->Items->Strings[listBox->ItemIndex];

        // Remove the selected item from the list
        listBox->Items->Delete(listBox->ItemIndex);
    } else {
        ShowMessage("Please select an item to edit.");
    }
}

//---------------------------------------------------------------------------

